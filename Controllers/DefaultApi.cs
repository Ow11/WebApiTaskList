/*
 * asp_rest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// List of all lists created yet
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        [HttpGet]
        [Route("/Lists")]
        [ValidateModelState]
        [SwaggerOperation("ListsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelList>), description: "Success")]
        public virtual IActionResult ListsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelList>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n}, {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ModelList>>(exampleJson)
                        : default(List<ModelList>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete list
        /// </summary>
        /// <param name="listId">Id of the list to retrieve</param>
        /// <response code="204">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpDelete]
        [Route("/Lists/{ListId}")]
        [ValidateModelState]
        [SwaggerOperation("ListsListIdDelete")]
        public virtual IActionResult ListsListIdDelete([FromRoute][Required]int? listId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// List itself
        /// </summary>
        /// <param name="listId">Id of the list to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        [HttpGet]
        [Route("/Lists/{ListId}")]
        [ValidateModelState]
        [SwaggerOperation("ListsListIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListDetailed), description: "Success")]
        public virtual IActionResult ListsListIdGet([FromRoute][Required]int? listId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListDetailed));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"todos\" : [ {\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 6\n  }, {\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 6\n  } ],\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ListDetailed>(exampleJson)
                        : default(ListDetailed);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update list detail
        /// </summary>
        /// <param name="body"></param>
        /// <param name="listId">Id of the list to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpPut]
        [Route("/Lists/{ListId}")]
        [ValidateModelState]
        [SwaggerOperation("ListsListIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelList), description: "Success")]
        public virtual IActionResult ListsListIdPut([FromBody]ModelList body, [FromRoute][Required]int? listId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelList));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelList>(exampleJson)
                        : default(ModelList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a list
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpPost]
        [Route("/Lists")]
        [ValidateModelState]
        [SwaggerOperation("ListsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelList>), description: "Success")]
        public virtual IActionResult ListsPost([FromBody]List<ModelList> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelList>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n}, {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ModelList>>(exampleJson)
                        : default(List<ModelList>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a todo
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpPost]
        [Route("/Todo")]
        [ValidateModelState]
        [SwaggerOperation("TodoPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Todo), description: "Success")]
        public virtual IActionResult TodoPost([FromBody]Todo body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Todo));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Todo>(exampleJson)
                        : default(Todo);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete todo
        /// </summary>
        /// <param name="todoId">Id of the todo to retrieve</param>
        /// <response code="204">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpDelete]
        [Route("/Todo/{TodoId}")]
        [ValidateModelState]
        [SwaggerOperation("TodoTodoIdDelete")]
        public virtual IActionResult TodoTodoIdDelete([FromRoute][Required]int? todoId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Todo itself
        /// </summary>
        /// <param name="todoId">Id of the todo to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        [HttpGet]
        [Route("/Todo/{TodoId}")]
        [ValidateModelState]
        [SwaggerOperation("TodoTodoIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Todo), description: "Success")]
        public virtual IActionResult TodoTodoIdGet([FromRoute][Required]int? todoId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Todo));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Todo>(exampleJson)
                        : default(Todo);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update todo detail
        /// </summary>
        /// <param name="body"></param>
        /// <param name="todoId">Id of the todo to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="403">Access token is missing or invalid</response>
        [HttpPut]
        [Route("/Todo/{TodoId}")]
        [ValidateModelState]
        [SwaggerOperation("TodoTodoIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Todo), description: "Success")]
        public virtual IActionResult TodoTodoIdPut([FromBody]Todo body, [FromRoute][Required]int? todoId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Todo));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Todo>(exampleJson)
                        : default(Todo);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
